/*
 * Milestone:
 * This file was generated by GStreamer's make_template script.
 * This element will add an XProtect generic byte data header to the video frame.
 * It expects as input a buffer containing a video frame with an xprotectmeta attached
 * to the buffer. It will then create a new buffer containing an XProtect Generic Byte
 * Data header at the first 32 bytes followed by the original video frame data.
 * The XProtect header will contain the information stored in the xprotectmeta structure.
 *
 * GStreamer
 * Copyright (C) 2005 Thomas Vander Stichele <thomas@apestaart.org>
 * Copyright (C) 2005 Ronald S. Bultje <rbultje@ronald.bitfreak.net>
 * Copyright (C) 2019  <<user@hostname.org>>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Alternatively, the contents of this file may be used under the
 * GNU Lesser General Public License Version 2.1 (the "LGPL"), in
 * which case the following provisions apply instead of the ones
 * mentioned above:
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

 /**
  * SECTION:element-toxprotectconverter
  *
  * The element toxprotectconverter will add an XProtect generic byte data header to the video frame.
  *
  * <refsect2>
  * <title>Example launch line</title>
  * |[
  * gst-launch -v -m fakesrc ! toxprotectconverter ! fakesink
  * ]|
  * </refsect2>
  */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <inttypes.h>
#include <stdio.h>
#include <time.h>
#include <gst/gst.h>
#include "../../Meta/gstvpsxprotectmeta/gstvpsxprotectmeta.h"
#include "../../VpsUtilities/GenericByteData/GenericByteData.h"
#include "gstvpstoxprotectconverter.h"
#include "gstvpsxprotect.h"

  /* Filter signals and args */
enum
{
  /* FILL ME */
  LAST_SIGNAL
};

enum
{
  PROP_0
};

/* the capabilities of the inputs and outputs.
 *
 * describe the real formats here.
 */
static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE("sink",
  GST_PAD_SINK,
  GST_PAD_ALWAYS,
  GST_STATIC_CAPS("ANY")
);

static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE("src",
  GST_PAD_SRC,
  GST_PAD_ALWAYS,
  GST_STATIC_CAPS("ANY")
);

#define gst_toxprotectconverter_parent_class parent_class
G_DEFINE_TYPE(GstToXprotectConverter, gst_toxprotectconverter, GST_TYPE_BIN);

static gboolean gst_toxprotectconverter_sink_event(GstPad * pad, GstObject * parent, GstEvent * event);
static GstFlowReturn gst_toxprotectconverter_chain(GstPad * pad, GstObject * parent, GstBuffer * buf);

/* GObject vmethod implementations */

/* initialize the toxprotectconverter's class */
static void
gst_toxprotectconverter_class_init(GstToXprotectConverterClass * klass)
{
  GST_DEBUG_CATEGORY_INIT(gst_xprotect_debug, "xprotect",
    0, "Template fromxprotectconverter");
  GObjectClass *gobject_class;
  GstElementClass *gstelement_class;

  gobject_class = (GObjectClass *)klass;
  gstelement_class = (GstElementClass *)klass;

  gst_element_class_set_details_simple(gstelement_class,
    "toxprotectconverter",
    "VPS/test",
    "Will attach a generic bytedata header to frame.",
    "developer.milestonesys.com");

  gst_element_class_add_pad_template(gstelement_class,
    gst_static_pad_template_get(&src_factory));
  gst_element_class_add_pad_template(gstelement_class,
    gst_static_pad_template_get(&sink_factory));
}

/* initialize the new element
 * instantiate pads and add them to element
 * set pad calback functions
 * initialize instance structure
 */
static void gst_toxprotectconverter_init(GstToXprotectConverter * filter)
{
  if (filter == NULL)
  {
    GST_ERROR("Filter parameter was NULL.");
    return;
  }
  filter->sinkpad = gst_pad_new_from_static_template(&sink_factory, "sink");
  gst_pad_set_event_function(filter->sinkpad,
    GST_DEBUG_FUNCPTR(gst_toxprotectconverter_sink_event));
  gst_pad_set_chain_function(filter->sinkpad,
    GST_DEBUG_FUNCPTR(gst_toxprotectconverter_chain));
  GST_PAD_SET_PROXY_CAPS(filter->sinkpad);
  gst_element_add_pad(GST_ELEMENT(filter), filter->sinkpad);

  filter->srcpad = gst_pad_new_from_static_template(&src_factory, "src");
  GST_PAD_SET_PROXY_CAPS(filter->srcpad);
  gst_element_add_pad(GST_ELEMENT(filter), filter->srcpad);
}

/* GstElement vmethod implementations */
/* this function handles sink events */
static gboolean
gst_toxprotectconverter_sink_event(GstPad * pad, GstObject * parent, GstEvent * event)
{
  GstToXprotectConverter *filter;
  gboolean ret;

  filter = GST_TOXPROTECTCONVERTER(parent);

  GST_LOG_OBJECT(filter, "Received %s event: %" GST_PTR_FORMAT,
    GST_EVENT_TYPE_NAME(event), event);

  switch (GST_EVENT_TYPE(event)) {
  case GST_EVENT_CAPS:
  {
    GstCaps * caps;

    gst_event_parse_caps(event, &caps);

    filter->codec = get_codec_from_caps(caps);
    gst_caps_unref(caps);

    /* and forward */
    ret = gst_pad_event_default(pad, parent, event);
    break;
  }
  default:
    ret = gst_pad_event_default(pad, parent, event);
    break;
  }
  return ret;
}

/* chain function
 * this function does the actual processing
 */
static GstFlowReturn gst_toxprotectconverter_chain(GstPad * pad, GstObject * parent, GstBuffer * buf)
{
  GstToXprotectConverter *filter;

  filter = GST_TOXPROTECTCONVERTER(parent);

  // Get the metadata
  GstMapInfo info;
  guint64 timestamp, sync_timestamp;
  guint32 sequence_number;

  GstXprotectMeta * meta = gst_buffer_get_xprotect_meta(buf);
  if (meta != NULL)
  {
    sequence_number = meta->sequence_number;
    sync_timestamp = meta->sync_timestamp;
    timestamp = meta->timestamp;
  }

  gst_buffer_map(buf, &info, GST_MAP_READ);

  VpsUtilities::GenericByteData * gbd = new VpsUtilities::GenericByteData((unsigned char*)info.data, (unsigned int)info.size, true, true);
  gbd->SetCodec((VpsUtilities::Codec) filter->codec);
  gbd->SetSequenceNumber(sequence_number);
  gbd->SetSyncTimeStamp(timestamp);
  gbd->SetTimeStamp(timestamp);
  gbd->SetFlags(1);

  GST_TRACE("TO seq no: %u\n", sequence_number);
  GST_TRACE("TO Sync ts no: %" PRIu64 "\n", sync_timestamp);
  GST_TRACE("TO ts no: %" PRIu64 "\n", timestamp);
  GstBuffer * outputBuffer = gst_buffer_new();
  GstMemory * mem = gst_allocator_alloc(NULL, gbd->GetLength(), NULL);
  gst_buffer_append_memory(outputBuffer, mem);
  GstMapInfo info2;
  gst_buffer_map(outputBuffer, &info2, GST_MAP_WRITE);
  memcpy(info2.data, gbd->GetData(), gbd->GetLength());
  delete gbd;
  gst_buffer_unmap(outputBuffer, &info2);

  gst_buffer_unmap(buf, &info);
  gst_buffer_unref(buf);

  return gst_pad_push(filter->srcpad, outputBuffer);
}

/*
 * Retrieves caps from the specified pad.
 * Returns the caps if they exist and pad can be retrieved,
 * returns NULL otherwise.
 */
GstCaps * get_caps(GstElement * element, gchar * padname)
{
  GstPad *pad = NULL;
  GstCaps *caps = NULL;

  // Retrieve pad
  pad = gst_element_get_static_pad(element, padname);
  if (!pad)
  {
    GST_ERROR("Could not retrieve pad '%s'\n", padname);
    return NULL;
  }

  // Retrieve negotiated caps (or acceptable caps if negotiation is not finished yet)
  caps = gst_pad_get_current_caps(pad);
  if (!caps)
  {
    caps = gst_pad_query_caps(pad, NULL);
  }

  gst_object_unref(pad);

  return caps;
}

/*
 * Parses the caps to find the codec.
 * Currently only jpeg is supported.
 * Returns 1 for jpeg, 0 otherwise.
 */
guint get_codec_from_caps(GstCaps * caps)
{
  if (caps != NULL && gst_caps_get_size(caps) > 0)
  {
    GstStructure *structure = gst_caps_get_structure(caps, 0);

    const gchar * name = gst_structure_get_name(structure);

    if (g_strcmp0(name, "image/jpeg") == 0)
    {
      return 1;
    }
    // Add else cases here when we need more codecs
  }
  return 0;
}
