/*
 * Milestone:
 * This file was generated by GStreamer's make_template script.
 * Converts the NvDsFrameMeta bounding boxes attached to the gstbuffer into bounding boxes in Onvif format and attaches
 * these as a gstvpsonvifmeta object to the buffer instead.
 *
 * GStreamer
 * Copyright (C) 2005 Thomas Vander Stichele <thomas@apestaart.org>
 * Copyright (C) 2005 Ronald S. Bultje <rbultje@ronald.bitfreak.net>
 * Copyright (C) 2019  <<user@hostname.org>>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Alternatively, the contents of this file may be used under the
 * GNU Lesser General Public License Version 2.1 (the "LGPL"), in
 * which case the following provisions apply instead of the ones
 * mentioned above:
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

 /**
  * SECTION:element-nvdstoonvif
  *
  * Converts the NvDsFrameMeta bounding boxes attached to the gstbuffer into bounding boxes in Onvif format and attaches
  * these as a gstvpsonvifmeta object to the buffer instead.
  *
  * <refsect2>
  * <title>Example launch line</title>
  * |[
  * gst-launch -v -m fakesrc ! nvdstoonvif ! fakesink
  * ]|
  * </refsect2>
  */

#include <sstream>
#include <gst/gst.h>
#include <chrono>
#include <list>
#include "gstvpsnvdstoonvif.h"
#include "../../Meta/gstvpsonvifmeta/gstvpsonvifmeta.h"
#include "../../VpsUtilities/OSHelper.h"
#include "gstnvdsmeta.h"

GST_DEBUG_CATEGORY_STATIC(gst_nvdstoonvif_debug);
#define GST_CAT_DEFAULT gst_nvdstoonvif_debug

#define CAR_COLOR "3cff63"
#define PERSON_COLOR "ff5dec"
#define BICYCLE_COLOR "7060ff"
#define ROADSIGN_COLOR "ff893a"

/* Filter signals and args */
enum
{
  /* FILL ME */
  LAST_SIGNAL
};

enum
{
  PROP_0,
  PROP_RETURN_VIDEO
};

/* the capabilities of the inputs and outputs.
 *
 * describe the real formats here.
 */
static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE("sink",
  GST_PAD_SINK,
  GST_PAD_ALWAYS,
  GST_STATIC_CAPS("ANY")
);

static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE("src",
  GST_PAD_SRC,
  GST_PAD_ALWAYS,
  GST_STATIC_CAPS("ANY")
);

#define gst_nvdstoonvif_parent_class parent_class
G_DEFINE_TYPE(GstNvDsToOnvif, gst_nvdstoonvif, GST_TYPE_ELEMENT);

static void gst_nvdstoonvif_set_property(GObject * object, guint prop_id, const GValue * value, GParamSpec * pspec);
static void gst_nvdstoonvif_get_property(GObject * object, guint prop_id, GValue * value, GParamSpec * pspec);

static gboolean gst_nvdstoonvif_sink_event(GstPad * pad, GstObject * parent, GstEvent * event);
static GstFlowReturn gst_nvdstoonvif_chain(GstPad * pad, GstObject * parent, GstBuffer * buf);
static std::string make_onvif_xml_multiple_boxes(std::string timestamp, std::list<std::string> boxes);
static std::string make_onvif_bounding_box(OnvifBoundingBox * box);
static std::string make_class_candidate(OnvifBoundingBox * box);

/* GObject vmethod implementations */

/* initialize the nvdstoonvif's class */
static void gst_nvdstoonvif_class_init(GstNvDsToOnvifClass * klass)
{
  GObjectClass *gobject_class;
  GstElementClass *gstelement_class;

  gstelement_class = (GstElementClass *)klass;

  gst_element_class_set_details_simple(gstelement_class,
    "nvdstoonvif",
    "VPS/test",
    "Converts the NvDsFrameMeta bounding boxes attached to the gstbuffer into bounding boxes in Onvif format and attaches these as a gstvpsonvifmeta object to the buffer instead.",
    "developer.milestonesys.com");

  gobject_class = (GObjectClass *)klass;
  gobject_class->set_property = gst_nvdstoonvif_set_property;
  gobject_class->get_property = gst_nvdstoonvif_get_property;
  g_object_class_install_property(gobject_class, PROP_RETURN_VIDEO,
    g_param_spec_boolean("return_video", "ReturnVideo", "Return the original video with the metadata ?",
      FALSE, G_PARAM_READWRITE));
  gst_element_class_add_pad_template(gstelement_class, gst_static_pad_template_get(&src_factory));
  gst_element_class_add_pad_template(gstelement_class, gst_static_pad_template_get(&sink_factory));
}

/* initialize the new element
 * instantiate pads and add them to element
 * set pad calback functions
 * initialize instance structure
 */
static void gst_nvdstoonvif_init(GstNvDsToOnvif * filter)
{
  filter->sinkpad = gst_pad_new_from_static_template(&sink_factory, "sink");
  gst_pad_set_event_function(filter->sinkpad, GST_DEBUG_FUNCPTR(gst_nvdstoonvif_sink_event));
  gst_pad_set_chain_function(filter->sinkpad, GST_DEBUG_FUNCPTR(gst_nvdstoonvif_chain));
  GST_PAD_SET_PROXY_CAPS(filter->sinkpad);
  gst_element_add_pad(GST_ELEMENT(filter), filter->sinkpad);

  filter->srcpad = gst_pad_new_from_static_template(&src_factory, "src");
  GST_PAD_SET_PROXY_CAPS(filter->srcpad);
  gst_element_add_pad(GST_ELEMENT(filter), filter->srcpad);
}

static void gst_nvdstoonvif_set_property(GObject * object, guint prop_id, const GValue * value, GParamSpec * pspec)
{
  GstNvDsToOnvif *filter = GST_NVDSTOONVIF(object);

  switch (prop_id)
  {
  case PROP_RETURN_VIDEO:
    filter->returnVideo = g_value_get_boolean(value);
    break;
  default:
    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
    break;
  }
}

static void gst_nvdstoonvif_get_property(GObject * object, guint prop_id, GValue * value, GParamSpec * pspec)
{
  GstNvDsToOnvif *filter = GST_NVDSTOONVIF(object);

  switch (prop_id)
  {
  case PROP_RETURN_VIDEO:
    g_value_set_boolean(value, filter->returnVideo);
    break;
  default:
    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
    break;
  }
}

/* GstElement vmethod implementations */
GstVideoInfo video_info;
/* this function handles sink events */
static gboolean gst_nvdstoonvif_sink_event(GstPad * pad, GstObject * parent, GstEvent * event)
{
  GstNvDsToOnvif *filter;
  gboolean ret;

  filter = GST_NVDSTOONVIF(parent);

  GST_LOG_OBJECT(filter, "Received %s event: %" GST_PTR_FORMAT,
    GST_EVENT_TYPE_NAME(event), event);

  switch (GST_EVENT_TYPE(event)) {
  case GST_EVENT_CAPS:
  {
    GstCaps * caps;

    gst_event_parse_caps(event, &caps);

    /* do something with the caps */
    gst_video_info_from_caps(&video_info, caps);

    /* and forward */
    ret = gst_pad_event_default(pad, parent, event);
    break;
  }
  default:
    ret = gst_pad_event_default(pad, parent, event);
    break;
  }
  return ret;
}

/* chain function
 * this function does the actual processing
 */
static GstFlowReturn
gst_nvdstoonvif_chain(GstPad * pad, GstObject * parent, GstBuffer * buf)
{
  GstNvDsToOnvif *filter;
  filter = GST_NVDSTOONVIF(parent);

  NvDsBatchMeta *batch_meta = gst_buffer_get_nvds_batch_meta(buf);
  std::list<std::string> allBoxes;

  if (batch_meta != nullptr)
  {
    for (NvDsMetaList * l_frame = batch_meta->frame_meta_list; l_frame != NULL; l_frame = l_frame->next)
    {
      NvDsFrameMeta *frame_meta = (NvDsFrameMeta *)(l_frame->data);
      for (NvDsMetaList *l_obj = frame_meta->obj_meta_list; l_obj != NULL; l_obj = l_obj->next)
      {
        NvDsObjectMeta *obj_meta = (NvDsObjectMeta *)(l_obj->data);
        if (obj_meta != nullptr)
        {
          NvOSD_RectParams rectparams = obj_meta->rect_params;
          OnvifBoundingBox * box = new OnvifBoundingBox();

          box->trackingId = obj_meta->object_id;
          double height_by_2 = video_info.height / 2;
          double width_by_2 = video_info.width / 2;

          box->bottom = (height_by_2 - (rectparams.top + rectparams.height)) / height_by_2;
          box->right = (rectparams.left + rectparams.width - width_by_2) / width_by_2;
          box->top = (height_by_2 - rectparams.top) / height_by_2;
          box->left = (rectparams.left - width_by_2) / width_by_2;
          box->cogX = 0.4;
          box->cogY = 0.2;
          box->likelihood = obj_meta->confidence;

          /* Check that the object has been detected by the primary detector
         * and that the class id is that of vehicles/persons. */
          if (obj_meta->unique_component_id == 1)
          {
            if (obj_meta->class_id == 0)
            {
              box->color = CAR_COLOR;
              box->type = "Car";
            }
            if (obj_meta->class_id == 1)
            {
              box->color = BICYCLE_COLOR;
              box->type = "Bicycle";
            }
            if (obj_meta->class_id == 2)
            {
              box->color = PERSON_COLOR;
              box->type = "Person";
            }
            if (obj_meta->class_id == 3)
            {
              box->color = ROADSIGN_COLOR;
              box->type = "Roadsign";
            }
          }
          allBoxes.push_front(make_onvif_bounding_box(box));
          delete box;
        }
      }
    }
  }
  else
  {
    g_print("batch_meta is null!\n");
  }

  uint64_t currentTime = std::chrono::duration_cast<std::chrono::milliseconds>(
    std::chrono::system_clock::now().time_since_epoch()).count();
  std::string currentTimeStr = OSHelper::get_time_as_string(currentTime);

  std::string xmlStr = make_onvif_xml_multiple_boxes(currentTimeStr, allBoxes);
  size_t strLength = xmlStr.length();

  GstMapInfo infoInput;
  GstMapInfo infoOutput;
  gst_buffer_map(buf, &infoInput, GST_MAP_READ);

  size_t frameLength = 0;
  if (filter->returnVideo)
  {
    frameLength = infoInput.size;
  }

  GstBuffer * outputBuffer = gst_buffer_new();
  GstMemory * mem = gst_allocator_alloc(NULL, frameLength, NULL);

  gst_buffer_append_memory(outputBuffer, mem);
  gst_buffer_map(outputBuffer, &infoOutput, GST_MAP_WRITE);

  memcpy(infoOutput.data, infoInput.data, infoOutput.size);

  gst_buffer_add_onvif_meta(outputBuffer, (gchar*)xmlStr.c_str(), strLength, currentTime);

  gst_buffer_unmap(outputBuffer, &infoOutput);
  gst_buffer_unmap(buf, &infoInput);
  gst_buffer_unref(buf);

  return gst_pad_push(filter->srcpad, outputBuffer);
}


/* entry point to initialize the plug-in
 * initialize the plug-in itself
 * register the element factories and other features
 */
static gboolean nvdstoonvif_init(GstPlugin * nvdstoonvif)
{
  /* debug category for fltering log messages
   *
   * exchange the string 'Template nvdstoonvif' with your description
   */
  GST_DEBUG_CATEGORY_INIT(gst_nvdstoonvif_debug, "nvdstoonvif",
    0, "Template nvdstoonvif");

  return gst_element_register(nvdstoonvif, "nvdstoonvif", GST_RANK_NONE,
    GST_TYPE_NVDSTOONVIF);
}

static std::string make_onvif_xml_multiple_boxes(std::string timestamp, std::list<std::string> boxes)
{
  std::stringstream sstream;
  sstream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
  sstream << "<tt:MetadataStream xmlns:tt=\"http://www.onvif.org/ver10/schema\">";
  sstream << "<tt:VideoAnalytics>";
  sstream << "<tt:Frame UtcTime=\"" << timestamp << "\">";

  for (std::string box : boxes)
  {
    sstream << box;
  }

  sstream << "</tt:Frame>";
  sstream << "</tt:VideoAnalytics>";
  sstream << "</tt:MetadataStream>";

  return sstream.str();
}

static std::string make_class_candidate(OnvifBoundingBox * box)
{
  std::stringstream ss;

  if (box->type.compare("Bicycle") == 0 ||
    box->type.compare("Car") == 0)
  {
    ss << "<tt:Class>";
    ss << "<tt:ClassCandidate>";
    ss << "<tt:Type>Vehical</tt:Type>";
    ss << "<tt:Likelihood>" << box->likelihood << "</tt:Likelihood>";
    ss << "</tt:ClassCandidate>";
    ss << "</tt:Class>";
    ss << "<tt:VehicleInfo>";
    ss << "<tt:Type>" << box->type << "</tt:Type>";
    ss << "</tt:VehicleInfo>";
  }
  else if (box->type.compare("Person") == 0)
  {
    ss << "<tt:Class>";
    ss << "<tt:ClassCandidate>";
    ss << "<tt:Type>Human</tt:Type>";
    ss << "<tt:Likelihood>" << box->likelihood << "</tt:Likelihood>";
    ss << "</tt:ClassCandidate>";
    ss << "</tt:Class>";
  }

  return ss.str();
}

static std::string make_onvif_bounding_box(OnvifBoundingBox * box)
{
  std::stringstream ss;
  ss << "<tt:Object ObjectId=\"" << box->trackingId << "\">";
  ss << "<tt:Appearance>";
  ss << make_class_candidate(box);
  ss << "<tt:Shape>";
  ss << "<tt:BoundingBox bottom=\"" << box->bottom << "\" right=\"" << box->right << "\" top=\"" << box->top << "\" left=\"" << box->left << "\"/>";
  ss << "<tt:CenterOfGravity y=\"" << box->cogY << "\" x=\"" << box->cogX << "\"/>";
  ss << "<tt:Extension>";
  ss << "<BoundingBoxAppearance>";
  ss << "<Fill color = \"#30" << box->color << "\" />";
  ss << "<Line color = \"#FF" << box->color << "\" displayedThicknessInPixels = \"2\" />";
  ss << "</BoundingBoxAppearance>";
  ss << "</tt:Extension>";
  ss << "</tt:Shape>";
  ss << "<tt:Extension>";
  ss << "<Description x=\"" << box->left + (box->right - box->left) / 2 << "\" y=\"" << box->top + 0.075 << "\" size=\"0.05\" bold=\"true\" ";
  ss << "italic=\"false\" fontFamily=\"Helvetica\" color=\"#FF" << box->color << "\"" << ">" << box->type;
  ss << "</Description>";
  ss << "</tt:Extension>";
  ss << "</tt:Appearance>";
  ss << "</tt:Object>";
  return ss.str();
}


/* PACKAGE: this is usually set by autotools depending on some _INIT macro
 * in configure.ac and then written into and defined in config.h, but we can
 * just set it ourselves here in case someone doesn't use autotools to
 * compile this code. GST_PLUGIN_DEFINE needs PACKAGE to be defined.
 */
#ifndef PACKAGE
#define PACKAGE "gst-vps-test"
#endif

#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "1.0"
#endif

#ifndef GST_PACKAGE_NAME
#define GST_PACKAGE_NAME "VPS Gstreamer test plugin package"
#endif

#ifndef GST_PACKAGE_ORIGIN
#define GST_PACKAGE_ORIGIN "Milestone Systems"
#endif

#ifndef GST_LICENSE
#define GST_LICENSE "LGPL"
#endif


 /* gstreamer looks for this structure to register nvdstoonvif */
GST_PLUGIN_DEFINE(
  GST_VERSION_MAJOR,
  GST_VERSION_MINOR,
  vpsnvdstoonvif,
  "Converts NvDsFrameMeta bounding boxes attached to the gstbuffer into bounding boxes in Onvif format and attaches these as a gstvpsonvifmeta object to the buffer instead.",
  nvdstoonvif_init,
  PACKAGE_VERSION,
  GST_LICENSE,
  GST_PACKAGE_NAME,
  GST_PACKAGE_ORIGIN
)
