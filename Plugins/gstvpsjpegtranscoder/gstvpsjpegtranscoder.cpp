/*
 * Milestone:
 * This file was generated by GStreamer's make_template script.
 * This plugin transcodes H.264 encoded video coming from an XProtect system
 * into JPEG frames ready for use in an XProtect system.
 *
 * GStreamer
 * Copyright (C) 2005 Thomas Vander Stichele <thomas@apestaart.org>
 * Copyright (C) 2005 Ronald S. Bultje <rbultje@ronald.bitfreak.net>
 * Copyright (C) 2019  <<user@hostname.org>>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Alternatively, the contents of this file may be used under the
 * GNU Lesser General Public License Version 2.1 (the "LGPL"), in
 * which case the following provisions apply instead of the ones
 * mentioned above:
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/**
 * SECTION:element-vpsjpegtranscoder
 *
 * Transcodes H.264 encoded video coming from an XProtect system
 * into JPEG frames ready for use in an XProtect system.
 *
 * <refsect2>
 * <title>Example launch line</title>
 * |[
 * gst-launch -v -m fakesrc ! vpsjpegtranscoder ! fakesink
 * ]|
 * </refsect2>
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif


#include <gst/gst.h>
#include "gstvpsjpegtranscoder.h"

GST_DEBUG_CATEGORY_STATIC (gst_vpsjpegtranscoder_debug);
#define GST_CAT_DEFAULT gst_vpsjpegtranscoder_debug

/* Filter signals and args */
enum
{
  /* FILL ME */
  LAST_SIGNAL
};

enum
{
  PROP_0
};

/* the capabilities of the inputs and outputs.
 *
 * describe the real formats here.
 */
static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE ("sink",
    GST_PAD_SINK,
    GST_PAD_ALWAYS,
    GST_STATIC_CAPS ("ANY")
    );

static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE ("src",
    GST_PAD_SRC,
    GST_PAD_ALWAYS,
    GST_STATIC_CAPS ("ANY")
    );

#define gst_vpsjpegtranscoder_parent_class parent_class
G_DEFINE_TYPE (GstVpsJpegTranscoder, gst_vpsjpegtranscoder, GST_TYPE_BIN);

static gboolean gst_vpsjpegtranscoder_sink_event (GstPad * pad, GstObject * parent, GstEvent * event);

/* GObject vmethod implementations */

/* initialize the vpsjpegtranscoder's class */
static void
gst_vpsjpegtranscoder_class_init (GstVpsJpegTranscoderClass * klass)
{
  GObjectClass *gobject_class;
  GstElementClass *gstelement_class;

  gobject_class = (GObjectClass *) klass;
  gstelement_class = (GstElementClass *) klass;

  gst_element_class_set_details_simple(gstelement_class,
    "vpsjpegtranscoder",
    "VPS/test",
    "Transcodes H.264 encoded video coming from an XProtect system into JPEG frames ready for use in an XProtect system.",
    "developer.milestonesys.com");

  gst_element_class_add_pad_template (gstelement_class,
      gst_static_pad_template_get (&src_factory));
  gst_element_class_add_pad_template (gstelement_class,
      gst_static_pad_template_get (&sink_factory));
}

/* initialize the new element
 * instantiate pads and add them to element
 * set pad calback functions
 * initialize instance structure
 */
static void gst_vpsjpegtranscoder_init (GstVpsJpegTranscoder * filter)
{
  if (filter != NULL)
  {
    // Create the xprotect element to remove generic byte data headers from the video frames
    filter->header_remover = gst_element_factory_make("fromxprotectconverter", "header_remover");
    if (!filter->header_remover)
    {
      GST_ERROR("Failed to create header_remover element.");
    }

    // Create the decoder and encoder elements
    filter->decoder = gst_element_factory_make("decodebin", "decoder");
    if (!filter->decoder)
    {
      GST_ERROR("Failed to create decoder element.");
    }

    filter->xprotect_join = gst_element_factory_make("xprotectjoin", "xprotect_join");
    if (!filter->xprotect_join)
    {
      GST_ERROR("Failed to create xprotect_join element.");
    }

    filter->encoder = gst_element_factory_make("jpegenc", "encoder");
    if (!filter->encoder)
    {
      GST_ERROR("Failed to create jpeg encoder element.");
    }

    // Create the xprotect element to add on the generic byte data headers to the video frames
    filter->header_inserter = gst_element_factory_make("toxprotectconverter", "header_inserter");
    if (!filter->header_inserter)
    {
      GST_ERROR("Failed to create header_inserter element.");
    }
    
    // Add them to the bin
    gst_bin_add((GstBin*)filter, filter->header_remover);
    gst_bin_add((GstBin*)filter, filter->xprotect_join);
    gst_bin_add((GstBin*)filter, filter->decoder);
    gst_bin_add((GstBin*)filter, filter->encoder);
    gst_bin_add((GstBin*)filter, filter->header_inserter);
    
    GstPadLinkReturn ret;
    GstPad *src_pad = gst_element_get_static_pad(filter->header_remover, "src_video");
    GstPad *sink_pad = gst_element_get_static_pad(filter->decoder, "sink");
    ret = gst_pad_link(src_pad, sink_pad);
    if (GST_PAD_LINK_FAILED(ret)) {
      GST_ERROR("header_remover and decoder could not be linked.\n");
    }
    gst_object_unref(src_pad);
    gst_object_unref(sink_pad);

    src_pad = gst_element_get_static_pad(filter->header_remover, "src_metadata");
    sink_pad = gst_element_get_static_pad(filter->xprotect_join, "sink_metadata");
    ret = gst_pad_link(src_pad, sink_pad);
    if (GST_PAD_LINK_FAILED(ret)) {
      GST_ERROR("header_remover and xprotect_join could not be linked.\n");
    }
    gst_object_unref(src_pad);
    gst_object_unref(sink_pad);

    if (gst_element_link(filter->xprotect_join, filter->encoder) != (gboolean)TRUE)
    {
      GST_ERROR("xprotect_join and encoder could not be linked.\n");
    }

    if (gst_element_link(filter->encoder, filter->header_inserter) != (gboolean)TRUE)
    {
      GST_ERROR("Encoder and header_inserter could not be linked.\n");
    }

    GstPad *gstpadsink = gst_element_get_static_pad(filter->header_remover, "sink");
    if (!gstpadsink)
    {
      GST_ERROR("Could not find '%s' in '%s'", "sink", "filter->decoder");
    }
    gst_element_add_pad((GstElement *)filter, gst_ghost_pad_new("sink", gstpadsink));
    gst_object_unref(gstpadsink);
    GstPad *gstpadsrc = gst_element_get_static_pad(filter->header_inserter, "src");
    if (!gstpadsrc)
    {
      GST_ERROR("Could not find '%s' in '%s'", "src", "filter->encoder");
    }
    gst_element_add_pad((GstElement *)filter, gst_ghost_pad_new("src", gstpadsrc));
    gst_object_unref(gstpadsrc);
    // Configure callbacks for decodebin
    g_signal_connect(filter->decoder, "pad-added", G_CALLBACK(pad_added_handler), filter->xprotect_join);
    g_signal_connect(filter->decoder, "child-added", G_CALLBACK(decodebin_child_added), filter);
  }
}

/* GstElement vmethod implementations */

/* this function handles sink events */
static gboolean
gst_vpsjpegtranscoder_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
{
  GstVpsJpegTranscoder *filter;
  gboolean ret;

  filter = GST_VPSJPEGTRANSCODER (parent);

  GST_LOG_OBJECT (filter, "Received %s event: %" GST_PTR_FORMAT,
      GST_EVENT_TYPE_NAME (event), event);

  switch (GST_EVENT_TYPE (event)) {
    case GST_EVENT_CAPS:
    {
      GstCaps * caps;

      gst_event_parse_caps (event, &caps);
      /* do something with the caps */

      /* and forward */
      ret = gst_pad_event_default (pad, parent, event);
      break;
    }
    default:
      ret = gst_pad_event_default (pad, parent, event);
      break;
  }
  return ret;
}

/* entry point to initialize the plug-in
 * initialize the plug-in itself
 * register the element factories and other features
 */
static gboolean
vpsjpegtranscoder_init (GstPlugin * vpsjpegtranscoder)
{
  /* debug category for filtering log messages
   */
  GST_DEBUG_CATEGORY_INIT (gst_vpsjpegtranscoder_debug, "vpsjpegtranscoder",
      0, "Transcodes H.264 encoded video coming from an XProtect system into JPEG frames ready for use in an XProtect system.");

  return gst_element_register (vpsjpegtranscoder, "vpsjpegtranscoder", GST_RANK_NONE,
      GST_TYPE_VPSJPEGTRANSCODER);
}

void decodebin_child_added(GstChildProxy *child_proxy, GObject *object, gchar *name, GstVpsJpegTranscoder *data)
{
  if (g_strrstr(name, "decodebin") == name) 
  {
    g_signal_connect(G_OBJECT(object), "child-added", G_CALLBACK(decodebin_child_added), data);
  }

  GST_INFO("Decodebin child added successfully.");
}

static void pad_added_handler(GstElement *src, GstPad *new_pad, GstElement *other) 
{
  gchar * otherName = gst_pad_get_name(new_pad);
  GST_INFO("New pad %s added for %s", otherName, gst_element_get_name(other));
  g_free(otherName);
  GstPadLinkReturn ret;
  GstPad *sink_pad = gst_element_get_static_pad(other, "sink_video");
  ret = gst_pad_link(new_pad, sink_pad);
  if (GST_PAD_LINK_FAILED(ret)) {
    GST_ERROR("Decoder and %s could not be linked.\n", gst_element_get_name(other));
  }
  gst_object_unref(sink_pad);
}




/* PACKAGE: this is usually set by autotools depending on some _INIT macro
 * in configure.ac and then written into and defined in config.h, but we can
 * just set it ourselves here in case someone doesn't use autotools to
 * compile this code. GST_PLUGIN_DEFINE needs PACKAGE to be defined.
 */
#ifndef PACKAGE
#define PACKAGE "gst-vps-test"
#endif

#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "1.0"
#endif

#ifndef GST_PACKAGE_NAME
#define GST_PACKAGE_NAME "VPS Gstreamer test plugin package"
#endif

#ifndef GST_PACKAGE_ORIGIN
#define GST_PACKAGE_ORIGIN "Milestone Systems"
#endif

#ifndef GST_LICENSE
#define GST_LICENSE "LGPL"
#endif


/* gstreamer looks for this structure to register vpsjpegtranscoders
 *
 * exchange the string 'Template vpsjpegtranscoder' with your vpsjpegtranscoder description
 */
GST_PLUGIN_DEFINE (
    GST_VERSION_MAJOR,
    GST_VERSION_MINOR,
    vpsjpegtranscoder,
    "Transcodes H.264 encoded video coming from an XProtect system into JPEG frames ready for use in an XProtect system.",
    vpsjpegtranscoder_init,
    PACKAGE_VERSION,
    GST_LICENSE,
    GST_PACKAGE_NAME,
    GST_PACKAGE_ORIGIN
)
